@using MyCompany.Store.SPA.Models;
@using MyCompany.Store.SPA.Services.Contracts;


@inject IOrderService orderService;
@inject DialogService dialogService;

<style>
    .row {
        margin-bottom: 16px;
    }
</style>

<RadzenTemplateForm Data="@order" Submit="@((OrderFormsModel args) => { Submit(args); })">

    <RadzenFieldset Text="Ogólne informacje">
        <div class="row">
            <div class="col-md-4 align-items-center d-flex">
                <RadzenLabel Text="Klient:" />
            </div>
            <div class="col-md-8">
                <RadzenTextBox style="width: 100%;" Name="ClientName" @bind-Value="order.ClientName" />
                <RadzenRequiredValidator Text="Pole Klient jest wymagane" Component="ClientName" Popup="false" />
            </div>
        </div>
        <div class="row">
            <div class="col-md-4 align-items-center d-flex">
                <RadzenLabel Text="Dodatkowe informacje:" />
            </div>
            <div class="col-md-8">
                <RadzenTextBox style="width: 100%;" Name="AdditionalInfo" @bind-Value="order.AdditionalInfo" />
            </div>
        </div>
    </RadzenFieldset>

    <RadzenFieldset Text="Linie zamówienia">
        <RadzenButton ButtonStyle="ButtonStyle.Success" Icon="add_circle_outline" class="mt-2 mb-4" Text="Dodaj nową linię zamówienia" Click="@InsertRow" Disabled=@(orderLineToInsert != null || orderLineToUpdate != null) />
        <RadzenDataGrid AllowAlternatingRows="false"
                        EditMode="DataGridEditMode.Single"
                        @ref="orderLinesGrid"
                        Data="@order.OrderLines"
                        TItem="OrderLinesDetailsModel"
                        RowCreate="@OnCreateRow"
                        RowUpdate="@OnUpdateRow"
                        ColumnWidth="200px">
            <Columns>
                <RadzenDataGridColumn TItem="OrderLinesDetailsModel" Property="ProductName" Title="Produkt">
                    <EditTemplate Context="orderLine">
                        <RadzenTextBox @bind-Value="orderLine.ProductName" Style="width:100%; display: block" Name="ProduktName" />
                        <RadzenRequiredValidator Text="Pole Produkt jest wymagane" Component="ProduktName" Popup="false" />
                    </EditTemplate>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="OrderLinesDetailsModel" Property="Price" Title="Cena">
                    <Template Context="orderLine">
                        @String.Format(new System.Globalization.CultureInfo("pl-PL"), "{0:C}", orderLine.Price)
                    </Template>
                    <EditTemplate Context="orderLine">
                        <RadzenNumeric @bind-Value="orderLine.Price" Style="width:100%" Name="Price" />
                        <RadzenRequiredValidator Text="Pole Cena jest wymagane" Component="Price" Popup="false" />
                    </EditTemplate>
                </RadzenDataGridColumn>

                <RadzenDataGridColumn TItem="OrderLinesDetailsModel" Context="orderLine" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Width="156px">
                    <Template Context="orderLine">
                        <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => EditRow(orderLine))" @onclick:stopPropagation="true">
                        </RadzenButton>
                        <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => DeleteRow(orderLine))" @onclick:stopPropagation="true">
                        </RadzenButton>
                    </Template>
                    <EditTemplate Context="orderLine">
                        <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@((args) => SaveRow(orderLine))">
                        </RadzenButton>
                    </EditTemplate>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>

    </RadzenFieldset>

    <div class="row justify-content-center">
        <div class="col-md-12 d-flex align-items-end justify-content-center" style="margin-top: 16px;">
            <RadzenButton ButtonType="ButtonType.Submit" Icon="save" Text="Zapisz" Disabled="@(IsLoading || !order.OrderLines.Any())" />

            <div>
                @if (!string.IsNullOrEmpty(ErrorMessage))
                {
                    <DisplayError ErrorMessage="ErrorMessage" />
                }
            </div>

        </div>
    </div>


</RadzenTemplateForm>


@code {

    OrderFormsModel order;

    RadzenDataGrid<OrderLinesDetailsModel> orderLinesGrid;

    OrderLinesDetailsModel orderLineToInsert;
    OrderLinesDetailsModel orderLineToUpdate;

    protected string ErrorMessage { get; set; }
    protected bool IsLoading { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        orderLinesGrid = new RadzenDataGrid<OrderLinesDetailsModel>();

        if (order == null)
        {
            order = new();
        }

    }

    async Task Submit(OrderFormsModel order)
    {
        try
        {
            IsLoading = true;

            await orderService.AddAsync(order);

            dialogService.Close();
        }
        catch(Exception e)
        {
            ErrorMessage = e.Message;
        }
        finally
        {
            IsLoading = false;
        }


    }

    async Task InsertRow()
    {
        orderLineToInsert = new OrderLinesDetailsModel();
        IsLoading = true;
        await orderLinesGrid.InsertRow(orderLineToInsert);
    }

    async Task SaveRow(OrderLinesDetailsModel orderLine)
    {
        await orderLinesGrid.UpdateRow(orderLine);
    }

    async Task EditRow(OrderLinesDetailsModel orderLine)
    {
        orderLineToUpdate = orderLine;
        IsLoading = true;
        await orderLinesGrid.EditRow(orderLine);
    }

    async Task DeleteRow(OrderLinesDetailsModel orderLine)
    {
        if (orderLine == orderLineToInsert)
        {
            orderLineToInsert = null;
        }

        if (orderLine == orderLineToUpdate)
        {
            orderLineToUpdate = null;
        }


        order.OrderLines.Remove(orderLine);

        orderLinesGrid.CancelEditRow(orderLine);

        await orderLinesGrid.Reload();
    }

    void OnCreateRow(OrderLinesDetailsModel orderLine)
    {
        order.OrderLines.Add(orderLine);

        orderLineToInsert = null;
        IsLoading = false;
    }

    void OnUpdateRow(OrderLinesDetailsModel orderLine)
    {
        IsLoading = false;
        orderLineToUpdate = null;
    }

}
